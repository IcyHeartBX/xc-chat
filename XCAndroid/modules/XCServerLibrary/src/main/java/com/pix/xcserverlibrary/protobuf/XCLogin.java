// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: xc_protoc.proto at 17:1
package com.pix.xcserverlibrary.protobuf;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 请求登录
 */
public final class XCLogin extends Message<XCLogin, XCLogin.Builder> {
  public static final ProtoAdapter<XCLogin> ADAPTER = new ProtoAdapter_XCLogin();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_UID = 0L;

  public static final Long DEFAULT_ROOMID = 0L;

  public static final String DEFAULT_TOKEN = "";

  public static final Boolean DEFAULT_RECONNECT = false;

  public static final String DEFAULT_NAME = "";

  /**
   * 用户ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REQUIRED
  )
  public final Long uid;

  /**
   * 房间ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT64",
      label = WireField.Label.REQUIRED
  )
  public final Long roomId;

  /**
   * 用户token
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String token;

  /**
   * 是否重连  fasle情况 会清除缓存数据
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL",
      label = WireField.Label.REQUIRED
  )
  public final Boolean reconnect;

  /**
   * 用户昵称
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REQUIRED
  )
  public final String name;

  public XCLogin(Long uid, Long roomId, String token, Boolean reconnect, String name) {
    this(uid, roomId, token, reconnect, name, ByteString.EMPTY);
  }

  public XCLogin(Long uid, Long roomId, String token, Boolean reconnect, String name, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.uid = uid;
    this.roomId = roomId;
    this.token = token;
    this.reconnect = reconnect;
    this.name = name;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.uid = uid;
    builder.roomId = roomId;
    builder.token = token;
    builder.reconnect = reconnect;
    builder.name = name;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof XCLogin)) return false;
    XCLogin o = (XCLogin) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(uid, o.uid)
        && Internal.equals(roomId, o.roomId)
        && Internal.equals(token, o.token)
        && Internal.equals(reconnect, o.reconnect)
        && Internal.equals(name, o.name);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (uid != null ? uid.hashCode() : 0);
      result = result * 37 + (roomId != null ? roomId.hashCode() : 0);
      result = result * 37 + (token != null ? token.hashCode() : 0);
      result = result * 37 + (reconnect != null ? reconnect.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (uid != null) builder.append(", uid=").append(uid);
    if (roomId != null) builder.append(", roomId=").append(roomId);
    if (token != null) builder.append(", token=").append(token);
    if (reconnect != null) builder.append(", reconnect=").append(reconnect);
    if (name != null) builder.append(", name=").append(name);
    return builder.replace(0, 2, "XCLogin{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<XCLogin, Builder> {
    public Long uid;

    public Long roomId;

    public String token;

    public Boolean reconnect;

    public String name;

    public Builder() {
    }

    /**
     * 用户ID
     */
    public Builder uid(Long uid) {
      this.uid = uid;
      return this;
    }

    /**
     * 房间ID
     */
    public Builder roomId(Long roomId) {
      this.roomId = roomId;
      return this;
    }

    /**
     * 用户token
     */
    public Builder token(String token) {
      this.token = token;
      return this;
    }

    /**
     * 是否重连  fasle情况 会清除缓存数据
     */
    public Builder reconnect(Boolean reconnect) {
      this.reconnect = reconnect;
      return this;
    }

    /**
     * 用户昵称
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    @Override
    public XCLogin build() {
      if (uid == null
          || roomId == null
          || reconnect == null
          || name == null) {
        throw Internal.missingRequiredFields(uid, "uid",
            roomId, "roomId",
            reconnect, "reconnect",
            name, "name");
      }
      return new XCLogin(uid, roomId, token, reconnect, name, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_XCLogin extends ProtoAdapter<XCLogin> {
    ProtoAdapter_XCLogin() {
      super(FieldEncoding.LENGTH_DELIMITED, XCLogin.class);
    }

    @Override
    public int encodedSize(XCLogin value) {
      return ProtoAdapter.INT64.encodedSizeWithTag(1, value.uid)
          + ProtoAdapter.INT64.encodedSizeWithTag(2, value.roomId)
          + (value.token != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.token) : 0)
          + ProtoAdapter.BOOL.encodedSizeWithTag(4, value.reconnect)
          + ProtoAdapter.STRING.encodedSizeWithTag(5, value.name)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, XCLogin value) throws IOException {
      ProtoAdapter.INT64.encodeWithTag(writer, 1, value.uid);
      ProtoAdapter.INT64.encodeWithTag(writer, 2, value.roomId);
      if (value.token != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.token);
      ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.reconnect);
      ProtoAdapter.STRING.encodeWithTag(writer, 5, value.name);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public XCLogin decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.uid(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.roomId(ProtoAdapter.INT64.decode(reader)); break;
          case 3: builder.token(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.reconnect(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public XCLogin redact(XCLogin value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
