// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: xc_protoc.proto at 27:1
package com.pix.xcserverlibrary.protobuf;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 登陆返回
 */
public final class XCLoginACK extends Message<XCLoginACK, XCLoginACK.Builder> {
  public static final ProtoAdapter<XCLoginACK> ADAPTER = new ProtoAdapter_XCLoginACK();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_RESULT = 0;

  public static final Boolean DEFAULT_ISMANAGER = false;

  public static final Long DEFAULT_ONLINEUSERS = 0L;

  /**
   * 0成功 1校验失败
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32",
      label = WireField.Label.REQUIRED
  )
  public final Integer result;

  /**
   * 是否是管理员
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isManager;

  /**
   * 在线用户数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#SINT64"
  )
  public final Long onlineUsers;

  public XCLoginACK(Integer result, Boolean isManager, Long onlineUsers) {
    this(result, isManager, onlineUsers, ByteString.EMPTY);
  }

  public XCLoginACK(Integer result, Boolean isManager, Long onlineUsers, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.result = result;
    this.isManager = isManager;
    this.onlineUsers = onlineUsers;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.result = result;
    builder.isManager = isManager;
    builder.onlineUsers = onlineUsers;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof XCLoginACK)) return false;
    XCLoginACK o = (XCLoginACK) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(result, o.result)
        && Internal.equals(isManager, o.isManager)
        && Internal.equals(onlineUsers, o.onlineUsers);
  }

  @Override
  public int hashCode() {
    int result_ = super.hashCode;
    if (result_ == 0) {
      result_ = unknownFields().hashCode();
      result_ = result_ * 37 + (result != null ? result.hashCode() : 0);
      result_ = result_ * 37 + (isManager != null ? isManager.hashCode() : 0);
      result_ = result_ * 37 + (onlineUsers != null ? onlineUsers.hashCode() : 0);
      super.hashCode = result_;
    }
    return result_;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (result != null) builder.append(", result=").append(result);
    if (isManager != null) builder.append(", isManager=").append(isManager);
    if (onlineUsers != null) builder.append(", onlineUsers=").append(onlineUsers);
    return builder.replace(0, 2, "XCLoginACK{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<XCLoginACK, Builder> {
    public Integer result;

    public Boolean isManager;

    public Long onlineUsers;

    public Builder() {
    }

    /**
     * 0成功 1校验失败
     */
    public Builder result(Integer result) {
      this.result = result;
      return this;
    }

    /**
     * 是否是管理员
     */
    public Builder isManager(Boolean isManager) {
      this.isManager = isManager;
      return this;
    }

    /**
     * 在线用户数
     */
    public Builder onlineUsers(Long onlineUsers) {
      this.onlineUsers = onlineUsers;
      return this;
    }

    @Override
    public XCLoginACK build() {
      if (result == null) {
        throw Internal.missingRequiredFields(result, "result");
      }
      return new XCLoginACK(result, isManager, onlineUsers, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_XCLoginACK extends ProtoAdapter<XCLoginACK> {
    ProtoAdapter_XCLoginACK() {
      super(FieldEncoding.LENGTH_DELIMITED, XCLoginACK.class);
    }

    @Override
    public int encodedSize(XCLoginACK value) {
      return ProtoAdapter.SINT32.encodedSizeWithTag(1, value.result)
          + (value.isManager != null ? ProtoAdapter.BOOL.encodedSizeWithTag(2, value.isManager) : 0)
          + (value.onlineUsers != null ? ProtoAdapter.SINT64.encodedSizeWithTag(3, value.onlineUsers) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, XCLoginACK value) throws IOException {
      ProtoAdapter.SINT32.encodeWithTag(writer, 1, value.result);
      if (value.isManager != null) ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.isManager);
      if (value.onlineUsers != null) ProtoAdapter.SINT64.encodeWithTag(writer, 3, value.onlineUsers);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public XCLoginACK decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.result(ProtoAdapter.SINT32.decode(reader)); break;
          case 2: builder.isManager(ProtoAdapter.BOOL.decode(reader)); break;
          case 3: builder.onlineUsers(ProtoAdapter.SINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public XCLoginACK redact(XCLoginACK value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
