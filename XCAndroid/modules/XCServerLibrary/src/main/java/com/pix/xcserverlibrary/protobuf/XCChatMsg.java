// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: xc_protoc.proto at 56:1
package com.pix.xcserverlibrary.protobuf;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 发送聊天(公聊) 2016年06月30日20:41:53 更改
 */
public final class XCChatMsg extends Message<XCChatMsg, XCChatMsg.Builder> {
  public static final ProtoAdapter<XCChatMsg> ADAPTER = new ProtoAdapter_XCChatMsg();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final String DEFAULT_CONTENT = "";

  /**
   * 类型 0聊天 其他的客户端自定义
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#SINT32"
  )
  public final Integer type;

  /**
   * 内容
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  public XCChatMsg(Integer type, String content) {
    this(type, content, ByteString.EMPTY);
  }

  public XCChatMsg(Integer type, String content, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.type = type;
    this.content = content;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.type = type;
    builder.content = content;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof XCChatMsg)) return false;
    XCChatMsg o = (XCChatMsg) other;
    return Internal.equals(unknownFields(), o.unknownFields())
        && Internal.equals(type, o.type)
        && Internal.equals(content, o.content);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (type != null) builder.append(", type=").append(type);
    if (content != null) builder.append(", content=").append(content);
    return builder.replace(0, 2, "XCChatMsg{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<XCChatMsg, Builder> {
    public Integer type;

    public String content;

    public Builder() {
    }

    /**
     * 类型 0聊天 其他的客户端自定义
     */
    public Builder type(Integer type) {
      this.type = type;
      return this;
    }

    /**
     * 内容
     */
    public Builder content(String content) {
      this.content = content;
      return this;
    }

    @Override
    public XCChatMsg build() {
      return new XCChatMsg(type, content, buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_XCChatMsg extends ProtoAdapter<XCChatMsg> {
    ProtoAdapter_XCChatMsg() {
      super(FieldEncoding.LENGTH_DELIMITED, XCChatMsg.class);
    }

    @Override
    public int encodedSize(XCChatMsg value) {
      return (value.type != null ? ProtoAdapter.SINT32.encodedSizeWithTag(1, value.type) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.content) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, XCChatMsg value) throws IOException {
      if (value.type != null) ProtoAdapter.SINT32.encodeWithTag(writer, 1, value.type);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.content);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public XCChatMsg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.type(ProtoAdapter.SINT32.decode(reader)); break;
          case 2: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public XCChatMsg redact(XCChatMsg value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
