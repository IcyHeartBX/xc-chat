// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xc_protoc.proto

#ifndef PROTOBUF_INCLUDED_xc_5fprotoc_2eproto
#define PROTOBUF_INCLUDED_xc_5fprotoc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xc_5fprotoc_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_xc_5fprotoc_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_xc_5fprotoc_2eproto();
namespace xc {
namespace protoc {
class ChatPlayer;
class ChatPlayerDefaultTypeInternal;
extern ChatPlayerDefaultTypeInternal _ChatPlayer_default_instance_;
class XCAlive;
class XCAliveDefaultTypeInternal;
extern XCAliveDefaultTypeInternal _XCAlive_default_instance_;
class XCAliveACK;
class XCAliveACKDefaultTypeInternal;
extern XCAliveACKDefaultTypeInternal _XCAliveACK_default_instance_;
class XCChatMsg;
class XCChatMsgDefaultTypeInternal;
extern XCChatMsgDefaultTypeInternal _XCChatMsg_default_instance_;
class XCChatMsgBRO;
class XCChatMsgBRODefaultTypeInternal;
extern XCChatMsgBRODefaultTypeInternal _XCChatMsgBRO_default_instance_;
class XCLogin;
class XCLoginDefaultTypeInternal;
extern XCLoginDefaultTypeInternal _XCLogin_default_instance_;
class XCLoginACK;
class XCLoginACKDefaultTypeInternal;
extern XCLoginACKDefaultTypeInternal _XCLoginACK_default_instance_;
class XCLogout;
class XCLogoutDefaultTypeInternal;
extern XCLogoutDefaultTypeInternal _XCLogout_default_instance_;
class XCOnlineCountBRO;
class XCOnlineCountBRODefaultTypeInternal;
extern XCOnlineCountBRODefaultTypeInternal _XCOnlineCountBRO_default_instance_;
class XCServerCloseBRO;
class XCServerCloseBRODefaultTypeInternal;
extern XCServerCloseBRODefaultTypeInternal _XCServerCloseBRO_default_instance_;
class XCSystemMsgBRO;
class XCSystemMsgBRODefaultTypeInternal;
extern XCSystemMsgBRODefaultTypeInternal _XCSystemMsgBRO_default_instance_;
}  // namespace protoc
}  // namespace xc
namespace google {
namespace protobuf {
template<> ::xc::protoc::ChatPlayer* Arena::CreateMaybeMessage<::xc::protoc::ChatPlayer>(Arena*);
template<> ::xc::protoc::XCAlive* Arena::CreateMaybeMessage<::xc::protoc::XCAlive>(Arena*);
template<> ::xc::protoc::XCAliveACK* Arena::CreateMaybeMessage<::xc::protoc::XCAliveACK>(Arena*);
template<> ::xc::protoc::XCChatMsg* Arena::CreateMaybeMessage<::xc::protoc::XCChatMsg>(Arena*);
template<> ::xc::protoc::XCChatMsgBRO* Arena::CreateMaybeMessage<::xc::protoc::XCChatMsgBRO>(Arena*);
template<> ::xc::protoc::XCLogin* Arena::CreateMaybeMessage<::xc::protoc::XCLogin>(Arena*);
template<> ::xc::protoc::XCLoginACK* Arena::CreateMaybeMessage<::xc::protoc::XCLoginACK>(Arena*);
template<> ::xc::protoc::XCLogout* Arena::CreateMaybeMessage<::xc::protoc::XCLogout>(Arena*);
template<> ::xc::protoc::XCOnlineCountBRO* Arena::CreateMaybeMessage<::xc::protoc::XCOnlineCountBRO>(Arena*);
template<> ::xc::protoc::XCServerCloseBRO* Arena::CreateMaybeMessage<::xc::protoc::XCServerCloseBRO>(Arena*);
template<> ::xc::protoc::XCSystemMsgBRO* Arena::CreateMaybeMessage<::xc::protoc::XCSystemMsgBRO>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace xc {
namespace protoc {

// ===================================================================

class XCAlive : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCAlive) */ {
 public:
  XCAlive();
  virtual ~XCAlive();

  XCAlive(const XCAlive& from);

  inline XCAlive& operator=(const XCAlive& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCAlive(XCAlive&& from) noexcept
    : XCAlive() {
    *this = ::std::move(from);
  }

  inline XCAlive& operator=(XCAlive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCAlive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCAlive* internal_default_instance() {
    return reinterpret_cast<const XCAlive*>(
               &_XCAlive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(XCAlive* other);
  friend void swap(XCAlive& a, XCAlive& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCAlive* New() const final {
    return CreateMaybeMessage<XCAlive>(nullptr);
  }

  XCAlive* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCAlive>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCAlive& from);
  void MergeFrom(const XCAlive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCAlive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 clientTime = 1;
  bool has_clienttime() const;
  void clear_clienttime();
  static const int kClientTimeFieldNumber = 1;
  ::google::protobuf::uint64 clienttime() const;
  void set_clienttime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCAlive)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 clienttime_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCAliveACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCAliveACK) */ {
 public:
  XCAliveACK();
  virtual ~XCAliveACK();

  XCAliveACK(const XCAliveACK& from);

  inline XCAliveACK& operator=(const XCAliveACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCAliveACK(XCAliveACK&& from) noexcept
    : XCAliveACK() {
    *this = ::std::move(from);
  }

  inline XCAliveACK& operator=(XCAliveACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCAliveACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCAliveACK* internal_default_instance() {
    return reinterpret_cast<const XCAliveACK*>(
               &_XCAliveACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(XCAliveACK* other);
  friend void swap(XCAliveACK& a, XCAliveACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCAliveACK* New() const final {
    return CreateMaybeMessage<XCAliveACK>(nullptr);
  }

  XCAliveACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCAliveACK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCAliveACK& from);
  void MergeFrom(const XCAliveACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCAliveACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 serverTime = 1;
  bool has_servertime() const;
  void clear_servertime();
  static const int kServerTimeFieldNumber = 1;
  ::google::protobuf::uint64 servertime() const;
  void set_servertime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCAliveACK)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 servertime_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCLogin) */ {
 public:
  XCLogin();
  virtual ~XCLogin();

  XCLogin(const XCLogin& from);

  inline XCLogin& operator=(const XCLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCLogin(XCLogin&& from) noexcept
    : XCLogin() {
    *this = ::std::move(from);
  }

  inline XCLogin& operator=(XCLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCLogin* internal_default_instance() {
    return reinterpret_cast<const XCLogin*>(
               &_XCLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(XCLogin* other);
  friend void swap(XCLogin& a, XCLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCLogin* New() const final {
    return CreateMaybeMessage<XCLogin>(nullptr);
  }

  XCLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCLogin& from);
  void MergeFrom(const XCLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string token = 3;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int64 uid = 1;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // required int64 roomId = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int64 roomid() const;
  void set_roomid(::google::protobuf::int64 value);

  // required bool reconnect = 4;
  bool has_reconnect() const;
  void clear_reconnect();
  static const int kReconnectFieldNumber = 4;
  bool reconnect() const;
  void set_reconnect(bool value);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCLogin)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 roomid_;
  bool reconnect_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCLoginACK : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCLoginACK) */ {
 public:
  XCLoginACK();
  virtual ~XCLoginACK();

  XCLoginACK(const XCLoginACK& from);

  inline XCLoginACK& operator=(const XCLoginACK& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCLoginACK(XCLoginACK&& from) noexcept
    : XCLoginACK() {
    *this = ::std::move(from);
  }

  inline XCLoginACK& operator=(XCLoginACK&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCLoginACK& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCLoginACK* internal_default_instance() {
    return reinterpret_cast<const XCLoginACK*>(
               &_XCLoginACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(XCLoginACK* other);
  friend void swap(XCLoginACK& a, XCLoginACK& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCLoginACK* New() const final {
    return CreateMaybeMessage<XCLoginACK>(nullptr);
  }

  XCLoginACK* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCLoginACK>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCLoginACK& from);
  void MergeFrom(const XCLoginACK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCLoginACK* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sint32 result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // optional bool isManager = 2;
  bool has_ismanager() const;
  void clear_ismanager();
  static const int kIsManagerFieldNumber = 2;
  bool ismanager() const;
  void set_ismanager(bool value);

  // optional sint64 onlineUsers = 3;
  bool has_onlineusers() const;
  void clear_onlineusers();
  static const int kOnlineUsersFieldNumber = 3;
  ::google::protobuf::int64 onlineusers() const;
  void set_onlineusers(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCLoginACK)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 result_;
  bool ismanager_;
  ::google::protobuf::int64 onlineusers_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCLogout : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCLogout) */ {
 public:
  XCLogout();
  virtual ~XCLogout();

  XCLogout(const XCLogout& from);

  inline XCLogout& operator=(const XCLogout& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCLogout(XCLogout&& from) noexcept
    : XCLogout() {
    *this = ::std::move(from);
  }

  inline XCLogout& operator=(XCLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCLogout* internal_default_instance() {
    return reinterpret_cast<const XCLogout*>(
               &_XCLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(XCLogout* other);
  friend void swap(XCLogout& a, XCLogout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCLogout* New() const final {
    return CreateMaybeMessage<XCLogout>(nullptr);
  }

  XCLogout* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCLogout>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCLogout& from);
  void MergeFrom(const XCLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCLogout* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xc.protoc.XCLogout)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCServerCloseBRO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCServerCloseBRO) */ {
 public:
  XCServerCloseBRO();
  virtual ~XCServerCloseBRO();

  XCServerCloseBRO(const XCServerCloseBRO& from);

  inline XCServerCloseBRO& operator=(const XCServerCloseBRO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCServerCloseBRO(XCServerCloseBRO&& from) noexcept
    : XCServerCloseBRO() {
    *this = ::std::move(from);
  }

  inline XCServerCloseBRO& operator=(XCServerCloseBRO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCServerCloseBRO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCServerCloseBRO* internal_default_instance() {
    return reinterpret_cast<const XCServerCloseBRO*>(
               &_XCServerCloseBRO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(XCServerCloseBRO* other);
  friend void swap(XCServerCloseBRO& a, XCServerCloseBRO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCServerCloseBRO* New() const final {
    return CreateMaybeMessage<XCServerCloseBRO>(nullptr);
  }

  XCServerCloseBRO* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCServerCloseBRO>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCServerCloseBRO& from);
  void MergeFrom(const XCServerCloseBRO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCServerCloseBRO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 1;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCServerCloseBRO)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class ChatPlayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.ChatPlayer) */ {
 public:
  ChatPlayer();
  virtual ~ChatPlayer();

  ChatPlayer(const ChatPlayer& from);

  inline ChatPlayer& operator=(const ChatPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatPlayer(ChatPlayer&& from) noexcept
    : ChatPlayer() {
    *this = ::std::move(from);
  }

  inline ChatPlayer& operator=(ChatPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ChatPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatPlayer* internal_default_instance() {
    return reinterpret_cast<const ChatPlayer*>(
               &_ChatPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ChatPlayer* other);
  friend void swap(ChatPlayer& a, ChatPlayer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatPlayer* New() const final {
    return CreateMaybeMessage<ChatPlayer>(nullptr);
  }

  ChatPlayer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatPlayer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatPlayer& from);
  void MergeFrom(const ChatPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatPlayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string headImg = 3;
  bool has_headimg() const;
  void clear_headimg();
  static const int kHeadImgFieldNumber = 3;
  const ::std::string& headimg() const;
  void set_headimg(const ::std::string& value);
  #if LANG_CXX11
  void set_headimg(::std::string&& value);
  #endif
  void set_headimg(const char* value);
  void set_headimg(const char* value, size_t size);
  ::std::string* mutable_headimg();
  ::std::string* release_headimg();
  void set_allocated_headimg(::std::string* headimg);

  // optional sint64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xc.protoc.ChatPlayer)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr headimg_;
  ::google::protobuf::int64 id_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCOnlineCountBRO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCOnlineCountBRO) */ {
 public:
  XCOnlineCountBRO();
  virtual ~XCOnlineCountBRO();

  XCOnlineCountBRO(const XCOnlineCountBRO& from);

  inline XCOnlineCountBRO& operator=(const XCOnlineCountBRO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCOnlineCountBRO(XCOnlineCountBRO&& from) noexcept
    : XCOnlineCountBRO() {
    *this = ::std::move(from);
  }

  inline XCOnlineCountBRO& operator=(XCOnlineCountBRO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCOnlineCountBRO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCOnlineCountBRO* internal_default_instance() {
    return reinterpret_cast<const XCOnlineCountBRO*>(
               &_XCOnlineCountBRO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(XCOnlineCountBRO* other);
  friend void swap(XCOnlineCountBRO& a, XCOnlineCountBRO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCOnlineCountBRO* New() const final {
    return CreateMaybeMessage<XCOnlineCountBRO>(nullptr);
  }

  XCOnlineCountBRO* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCOnlineCountBRO>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCOnlineCountBRO& from);
  void MergeFrom(const XCOnlineCountBRO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCOnlineCountBRO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional sint64 count = 1;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 1;
  ::google::protobuf::int64 count() const;
  void set_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCOnlineCountBRO)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 count_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCChatMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCChatMsg) */ {
 public:
  XCChatMsg();
  virtual ~XCChatMsg();

  XCChatMsg(const XCChatMsg& from);

  inline XCChatMsg& operator=(const XCChatMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCChatMsg(XCChatMsg&& from) noexcept
    : XCChatMsg() {
    *this = ::std::move(from);
  }

  inline XCChatMsg& operator=(XCChatMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCChatMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCChatMsg* internal_default_instance() {
    return reinterpret_cast<const XCChatMsg*>(
               &_XCChatMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(XCChatMsg* other);
  friend void swap(XCChatMsg& a, XCChatMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCChatMsg* New() const final {
    return CreateMaybeMessage<XCChatMsg>(nullptr);
  }

  XCChatMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCChatMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCChatMsg& from);
  void MergeFrom(const XCChatMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCChatMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 3;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 3;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // optional .xc.protoc.ChatPlayer player = 2;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 2;
  const ::xc::protoc::ChatPlayer& player() const;
  ::xc::protoc::ChatPlayer* release_player();
  ::xc::protoc::ChatPlayer* mutable_player();
  void set_allocated_player(::xc::protoc::ChatPlayer* player);

  // optional sint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCChatMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::xc::protoc::ChatPlayer* player_;
  ::google::protobuf::int32 type_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCChatMsgBRO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCChatMsgBRO) */ {
 public:
  XCChatMsgBRO();
  virtual ~XCChatMsgBRO();

  XCChatMsgBRO(const XCChatMsgBRO& from);

  inline XCChatMsgBRO& operator=(const XCChatMsgBRO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCChatMsgBRO(XCChatMsgBRO&& from) noexcept
    : XCChatMsgBRO() {
    *this = ::std::move(from);
  }

  inline XCChatMsgBRO& operator=(XCChatMsgBRO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCChatMsgBRO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCChatMsgBRO* internal_default_instance() {
    return reinterpret_cast<const XCChatMsgBRO*>(
               &_XCChatMsgBRO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(XCChatMsgBRO* other);
  friend void swap(XCChatMsgBRO& a, XCChatMsgBRO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCChatMsgBRO* New() const final {
    return CreateMaybeMessage<XCChatMsgBRO>(nullptr);
  }

  XCChatMsgBRO* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCChatMsgBRO>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCChatMsgBRO& from);
  void MergeFrom(const XCChatMsgBRO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCChatMsgBRO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .xc.protoc.ChatPlayer player = 1;
  bool has_player() const;
  void clear_player();
  static const int kPlayerFieldNumber = 1;
  const ::xc::protoc::ChatPlayer& player() const;
  ::xc::protoc::ChatPlayer* release_player();
  ::xc::protoc::ChatPlayer* mutable_player();
  void set_allocated_player(::xc::protoc::ChatPlayer* player);

  // optional .xc.protoc.XCChatMsg chat = 2;
  bool has_chat() const;
  void clear_chat();
  static const int kChatFieldNumber = 2;
  const ::xc::protoc::XCChatMsg& chat() const;
  ::xc::protoc::XCChatMsg* release_chat();
  ::xc::protoc::XCChatMsg* mutable_chat();
  void set_allocated_chat(::xc::protoc::XCChatMsg* chat);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCChatMsgBRO)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::xc::protoc::ChatPlayer* player_;
  ::xc::protoc::XCChatMsg* chat_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// -------------------------------------------------------------------

class XCSystemMsgBRO : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xc.protoc.XCSystemMsgBRO) */ {
 public:
  XCSystemMsgBRO();
  virtual ~XCSystemMsgBRO();

  XCSystemMsgBRO(const XCSystemMsgBRO& from);

  inline XCSystemMsgBRO& operator=(const XCSystemMsgBRO& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  XCSystemMsgBRO(XCSystemMsgBRO&& from) noexcept
    : XCSystemMsgBRO() {
    *this = ::std::move(from);
  }

  inline XCSystemMsgBRO& operator=(XCSystemMsgBRO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const XCSystemMsgBRO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const XCSystemMsgBRO* internal_default_instance() {
    return reinterpret_cast<const XCSystemMsgBRO*>(
               &_XCSystemMsgBRO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(XCSystemMsgBRO* other);
  friend void swap(XCSystemMsgBRO& a, XCSystemMsgBRO& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline XCSystemMsgBRO* New() const final {
    return CreateMaybeMessage<XCSystemMsgBRO>(nullptr);
  }

  XCSystemMsgBRO* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<XCSystemMsgBRO>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const XCSystemMsgBRO& from);
  void MergeFrom(const XCSystemMsgBRO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XCSystemMsgBRO* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string content = 2;
  int content_size() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content(int index) const;
  ::std::string* mutable_content(int index);
  void set_content(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_content(int index, ::std::string&& value);
  #endif
  void set_content(int index, const char* value);
  void set_content(int index, const char* value, size_t size);
  ::std::string* add_content();
  void add_content(const ::std::string& value);
  #if LANG_CXX11
  void add_content(::std::string&& value);
  #endif
  void add_content(const char* value);
  void add_content(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& content() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_content();

  // optional sint32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:xc.protoc.XCSystemMsgBRO)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField<::std::string> content_;
  ::google::protobuf::int32 type_;
  friend struct ::TableStruct_xc_5fprotoc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XCAlive

// optional uint64 clientTime = 1;
inline bool XCAlive::has_clienttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCAlive::clear_clienttime() {
  clienttime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 XCAlive::clienttime() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCAlive.clientTime)
  return clienttime_;
}
inline void XCAlive::set_clienttime(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  clienttime_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCAlive.clientTime)
}

// -------------------------------------------------------------------

// XCAliveACK

// optional uint64 serverTime = 1;
inline bool XCAliveACK::has_servertime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCAliveACK::clear_servertime() {
  servertime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 XCAliveACK::servertime() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCAliveACK.serverTime)
  return servertime_;
}
inline void XCAliveACK::set_servertime(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  servertime_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCAliveACK.serverTime)
}

// -------------------------------------------------------------------

// XCLogin

// required int64 uid = 1;
inline bool XCLogin::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void XCLogin::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 XCLogin::uid() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLogin.uid)
  return uid_;
}
inline void XCLogin::set_uid(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  uid_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCLogin.uid)
}

// required int64 roomId = 2;
inline bool XCLogin::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void XCLogin::clear_roomid() {
  roomid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::int64 XCLogin::roomid() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLogin.roomId)
  return roomid_;
}
inline void XCLogin::set_roomid(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  roomid_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCLogin.roomId)
}

// optional string token = 3;
inline bool XCLogin::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCLogin::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& XCLogin::token() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLogin.token)
  return token_.GetNoArena();
}
inline void XCLogin::set_token(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xc.protoc.XCLogin.token)
}
#if LANG_CXX11
inline void XCLogin::set_token(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xc.protoc.XCLogin.token)
}
#endif
inline void XCLogin::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xc.protoc.XCLogin.token)
}
inline void XCLogin::set_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xc.protoc.XCLogin.token)
}
inline ::std::string* XCLogin::mutable_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCLogin.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XCLogin::release_token() {
  // @@protoc_insertion_point(field_release:xc.protoc.XCLogin.token)
  if (!has_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return token_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XCLogin::set_allocated_token(::std::string* token) {
  if (token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.XCLogin.token)
}

// required bool reconnect = 4;
inline bool XCLogin::has_reconnect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void XCLogin::clear_reconnect() {
  reconnect_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool XCLogin::reconnect() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLogin.reconnect)
  return reconnect_;
}
inline void XCLogin::set_reconnect(bool value) {
  _has_bits_[0] |= 0x00000010u;
  reconnect_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCLogin.reconnect)
}

// required string name = 5;
inline bool XCLogin::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XCLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& XCLogin::name() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLogin.name)
  return name_.GetNoArena();
}
inline void XCLogin::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xc.protoc.XCLogin.name)
}
#if LANG_CXX11
inline void XCLogin::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xc.protoc.XCLogin.name)
}
#endif
inline void XCLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xc.protoc.XCLogin.name)
}
inline void XCLogin::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xc.protoc.XCLogin.name)
}
inline ::std::string* XCLogin::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCLogin.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XCLogin::release_name() {
  // @@protoc_insertion_point(field_release:xc.protoc.XCLogin.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XCLogin::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.XCLogin.name)
}

// -------------------------------------------------------------------

// XCLoginACK

// required sint32 result = 1;
inline bool XCLoginACK::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCLoginACK::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 XCLoginACK::result() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLoginACK.result)
  return result_;
}
inline void XCLoginACK::set_result(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCLoginACK.result)
}

// optional bool isManager = 2;
inline bool XCLoginACK::has_ismanager() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XCLoginACK::clear_ismanager() {
  ismanager_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool XCLoginACK::ismanager() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLoginACK.isManager)
  return ismanager_;
}
inline void XCLoginACK::set_ismanager(bool value) {
  _has_bits_[0] |= 0x00000002u;
  ismanager_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCLoginACK.isManager)
}

// optional sint64 onlineUsers = 3;
inline bool XCLoginACK::has_onlineusers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void XCLoginACK::clear_onlineusers() {
  onlineusers_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 XCLoginACK::onlineusers() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCLoginACK.onlineUsers)
  return onlineusers_;
}
inline void XCLoginACK::set_onlineusers(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  onlineusers_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCLoginACK.onlineUsers)
}

// -------------------------------------------------------------------

// XCLogout

// -------------------------------------------------------------------

// XCServerCloseBRO

// optional string msg = 1;
inline bool XCServerCloseBRO::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCServerCloseBRO::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& XCServerCloseBRO::msg() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCServerCloseBRO.msg)
  return msg_.GetNoArena();
}
inline void XCServerCloseBRO::set_msg(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xc.protoc.XCServerCloseBRO.msg)
}
#if LANG_CXX11
inline void XCServerCloseBRO::set_msg(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xc.protoc.XCServerCloseBRO.msg)
}
#endif
inline void XCServerCloseBRO::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xc.protoc.XCServerCloseBRO.msg)
}
inline void XCServerCloseBRO::set_msg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xc.protoc.XCServerCloseBRO.msg)
}
inline ::std::string* XCServerCloseBRO::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCServerCloseBRO.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XCServerCloseBRO::release_msg() {
  // @@protoc_insertion_point(field_release:xc.protoc.XCServerCloseBRO.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XCServerCloseBRO::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.XCServerCloseBRO.msg)
}

// -------------------------------------------------------------------

// ChatPlayer

// optional sint64 id = 1;
inline bool ChatPlayer::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatPlayer::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 ChatPlayer::id() const {
  // @@protoc_insertion_point(field_get:xc.protoc.ChatPlayer.id)
  return id_;
}
inline void ChatPlayer::set_id(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.ChatPlayer.id)
}

// optional string name = 2;
inline bool ChatPlayer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ChatPlayer::name() const {
  // @@protoc_insertion_point(field_get:xc.protoc.ChatPlayer.name)
  return name_.GetNoArena();
}
inline void ChatPlayer::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xc.protoc.ChatPlayer.name)
}
#if LANG_CXX11
inline void ChatPlayer::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xc.protoc.ChatPlayer.name)
}
#endif
inline void ChatPlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xc.protoc.ChatPlayer.name)
}
inline void ChatPlayer::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xc.protoc.ChatPlayer.name)
}
inline ::std::string* ChatPlayer::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xc.protoc.ChatPlayer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatPlayer::release_name() {
  // @@protoc_insertion_point(field_release:xc.protoc.ChatPlayer.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatPlayer::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.ChatPlayer.name)
}

// optional string headImg = 3;
inline bool ChatPlayer::has_headimg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatPlayer::clear_headimg() {
  headimg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& ChatPlayer::headimg() const {
  // @@protoc_insertion_point(field_get:xc.protoc.ChatPlayer.headImg)
  return headimg_.GetNoArena();
}
inline void ChatPlayer::set_headimg(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  headimg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xc.protoc.ChatPlayer.headImg)
}
#if LANG_CXX11
inline void ChatPlayer::set_headimg(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  headimg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xc.protoc.ChatPlayer.headImg)
}
#endif
inline void ChatPlayer::set_headimg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  headimg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xc.protoc.ChatPlayer.headImg)
}
inline void ChatPlayer::set_headimg(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  headimg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xc.protoc.ChatPlayer.headImg)
}
inline ::std::string* ChatPlayer::mutable_headimg() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:xc.protoc.ChatPlayer.headImg)
  return headimg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatPlayer::release_headimg() {
  // @@protoc_insertion_point(field_release:xc.protoc.ChatPlayer.headImg)
  if (!has_headimg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return headimg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatPlayer::set_allocated_headimg(::std::string* headimg) {
  if (headimg != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  headimg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimg);
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.ChatPlayer.headImg)
}

// -------------------------------------------------------------------

// XCOnlineCountBRO

// optional sint64 count = 1;
inline bool XCOnlineCountBRO::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCOnlineCountBRO::clear_count() {
  count_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int64 XCOnlineCountBRO::count() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCOnlineCountBRO.count)
  return count_;
}
inline void XCOnlineCountBRO::set_count(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  count_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCOnlineCountBRO.count)
}

// -------------------------------------------------------------------

// XCChatMsg

// optional sint32 type = 1;
inline bool XCChatMsg::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void XCChatMsg::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 XCChatMsg::type() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCChatMsg.type)
  return type_;
}
inline void XCChatMsg::set_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCChatMsg.type)
}

// optional .xc.protoc.ChatPlayer player = 2;
inline bool XCChatMsg::has_player() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XCChatMsg::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::xc::protoc::ChatPlayer& XCChatMsg::player() const {
  const ::xc::protoc::ChatPlayer* p = player_;
  // @@protoc_insertion_point(field_get:xc.protoc.XCChatMsg.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::xc::protoc::ChatPlayer*>(
      &::xc::protoc::_ChatPlayer_default_instance_);
}
inline ::xc::protoc::ChatPlayer* XCChatMsg::release_player() {
  // @@protoc_insertion_point(field_release:xc.protoc.XCChatMsg.player)
  _has_bits_[0] &= ~0x00000002u;
  ::xc::protoc::ChatPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::xc::protoc::ChatPlayer* XCChatMsg::mutable_player() {
  _has_bits_[0] |= 0x00000002u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::xc::protoc::ChatPlayer>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCChatMsg.player)
  return player_;
}
inline void XCChatMsg::set_allocated_player(::xc::protoc::ChatPlayer* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.XCChatMsg.player)
}

// optional string content = 3;
inline bool XCChatMsg::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCChatMsg::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& XCChatMsg::content() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCChatMsg.content)
  return content_.GetNoArena();
}
inline void XCChatMsg::set_content(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xc.protoc.XCChatMsg.content)
}
#if LANG_CXX11
inline void XCChatMsg::set_content(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:xc.protoc.XCChatMsg.content)
}
#endif
inline void XCChatMsg::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xc.protoc.XCChatMsg.content)
}
inline void XCChatMsg::set_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xc.protoc.XCChatMsg.content)
}
inline ::std::string* XCChatMsg::mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCChatMsg.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* XCChatMsg::release_content() {
  // @@protoc_insertion_point(field_release:xc.protoc.XCChatMsg.content)
  if (!has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void XCChatMsg::set_allocated_content(::std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.XCChatMsg.content)
}

// -------------------------------------------------------------------

// XCChatMsgBRO

// optional .xc.protoc.ChatPlayer player = 1;
inline bool XCChatMsgBRO::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCChatMsgBRO::clear_player() {
  if (player_ != nullptr) player_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::xc::protoc::ChatPlayer& XCChatMsgBRO::player() const {
  const ::xc::protoc::ChatPlayer* p = player_;
  // @@protoc_insertion_point(field_get:xc.protoc.XCChatMsgBRO.player)
  return p != nullptr ? *p : *reinterpret_cast<const ::xc::protoc::ChatPlayer*>(
      &::xc::protoc::_ChatPlayer_default_instance_);
}
inline ::xc::protoc::ChatPlayer* XCChatMsgBRO::release_player() {
  // @@protoc_insertion_point(field_release:xc.protoc.XCChatMsgBRO.player)
  _has_bits_[0] &= ~0x00000001u;
  ::xc::protoc::ChatPlayer* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::xc::protoc::ChatPlayer* XCChatMsgBRO::mutable_player() {
  _has_bits_[0] |= 0x00000001u;
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::xc::protoc::ChatPlayer>(GetArenaNoVirtual());
    player_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCChatMsgBRO.player)
  return player_;
}
inline void XCChatMsgBRO::set_allocated_player(::xc::protoc::ChatPlayer* player) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.XCChatMsgBRO.player)
}

// optional .xc.protoc.XCChatMsg chat = 2;
inline bool XCChatMsgBRO::has_chat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void XCChatMsgBRO::clear_chat() {
  if (chat_ != nullptr) chat_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::xc::protoc::XCChatMsg& XCChatMsgBRO::chat() const {
  const ::xc::protoc::XCChatMsg* p = chat_;
  // @@protoc_insertion_point(field_get:xc.protoc.XCChatMsgBRO.chat)
  return p != nullptr ? *p : *reinterpret_cast<const ::xc::protoc::XCChatMsg*>(
      &::xc::protoc::_XCChatMsg_default_instance_);
}
inline ::xc::protoc::XCChatMsg* XCChatMsgBRO::release_chat() {
  // @@protoc_insertion_point(field_release:xc.protoc.XCChatMsgBRO.chat)
  _has_bits_[0] &= ~0x00000002u;
  ::xc::protoc::XCChatMsg* temp = chat_;
  chat_ = nullptr;
  return temp;
}
inline ::xc::protoc::XCChatMsg* XCChatMsgBRO::mutable_chat() {
  _has_bits_[0] |= 0x00000002u;
  if (chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::xc::protoc::XCChatMsg>(GetArenaNoVirtual());
    chat_ = p;
  }
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCChatMsgBRO.chat)
  return chat_;
}
inline void XCChatMsgBRO::set_allocated_chat(::xc::protoc::XCChatMsg* chat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chat_;
  }
  if (chat) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chat_ = chat;
  // @@protoc_insertion_point(field_set_allocated:xc.protoc.XCChatMsgBRO.chat)
}

// -------------------------------------------------------------------

// XCSystemMsgBRO

// optional sint32 type = 1;
inline bool XCSystemMsgBRO::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void XCSystemMsgBRO::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 XCSystemMsgBRO::type() const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCSystemMsgBRO.type)
  return type_;
}
inline void XCSystemMsgBRO::set_type(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:xc.protoc.XCSystemMsgBRO.type)
}

// repeated string content = 2;
inline int XCSystemMsgBRO::content_size() const {
  return content_.size();
}
inline void XCSystemMsgBRO::clear_content() {
  content_.Clear();
}
inline const ::std::string& XCSystemMsgBRO::content(int index) const {
  // @@protoc_insertion_point(field_get:xc.protoc.XCSystemMsgBRO.content)
  return content_.Get(index);
}
inline ::std::string* XCSystemMsgBRO::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:xc.protoc.XCSystemMsgBRO.content)
  return content_.Mutable(index);
}
inline void XCSystemMsgBRO::set_content(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:xc.protoc.XCSystemMsgBRO.content)
  content_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void XCSystemMsgBRO::set_content(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:xc.protoc.XCSystemMsgBRO.content)
  content_.Mutable(index)->assign(std::move(value));
}
#endif
inline void XCSystemMsgBRO::set_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:xc.protoc.XCSystemMsgBRO.content)
}
inline void XCSystemMsgBRO::set_content(int index, const char* value, size_t size) {
  content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:xc.protoc.XCSystemMsgBRO.content)
}
inline ::std::string* XCSystemMsgBRO::add_content() {
  // @@protoc_insertion_point(field_add_mutable:xc.protoc.XCSystemMsgBRO.content)
  return content_.Add();
}
inline void XCSystemMsgBRO::add_content(const ::std::string& value) {
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:xc.protoc.XCSystemMsgBRO.content)
}
#if LANG_CXX11
inline void XCSystemMsgBRO::add_content(::std::string&& value) {
  content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:xc.protoc.XCSystemMsgBRO.content)
}
#endif
inline void XCSystemMsgBRO::add_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:xc.protoc.XCSystemMsgBRO.content)
}
inline void XCSystemMsgBRO::add_content(const char* value, size_t size) {
  content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:xc.protoc.XCSystemMsgBRO.content)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
XCSystemMsgBRO::content() const {
  // @@protoc_insertion_point(field_list:xc.protoc.XCSystemMsgBRO.content)
  return content_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
XCSystemMsgBRO::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:xc.protoc.XCSystemMsgBRO.content)
  return &content_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoc
}  // namespace xc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_xc_5fprotoc_2eproto
